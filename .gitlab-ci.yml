default:
  image: docker:19.03.12
  services:
    - docker:19.03.12-dind
  before_script:
    - apk update
    - apk add python3 
    - apk add py3-pip
    - docker info
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - mkdir .artifacts || True
    - base64 -d $GDRIVE_SERVICE_ACCOUNT_JSON > .artifacts/gdrive_service_key.json
    - pip3 install -U sphinx
    - pip3 install -U sphinx_rtd_theme

stages:
  - retrain 
  - build
  - test
  - release
  - deploy

variables:
  DOCKER_TLS_CERTDIR: "/certs"
  CONTAINER_TEST_IMAGE: $CI_REGISTRY_IMAGE/housinglib-testing:$CI_COMMIT_REF_SLUG
  CONTAINER_RELEASE_IMAGE: $CI_REGISTRY_IMAGE/housinglib:latest

build:
  stage: build
  tags: 
    - local
  script:
    - docker pull $CI_REGISTRY_IMAGE:latest || true
    - docker build --cache-from $CI_REGISTRY_IMAGE:latest --tag $CONTAINER_TEST_IMAGE .
    - docker push $CONTAINER_TEST_IMAGE

retrain_model:
  stage: retrain
  image: python:3.9.3-slim-buster
  tags:
    - local
  before_script:
    - apt-get update
    - apt-get -y install make
    - pip3 install -r requirements-test.txt
    - python3 setup.py install
    - mkdir .artifacts || true
    - base64 -d -i $GDRIVE_SERVICE_ACCOUNT_JSON > .artifacts/gdrive_service_key.json
    - 'which ssh-agent || ( apt-get install openssh-client -y )'
    - eval $(ssh-agent -s)
    - ssh-add <(base64 -d -i $GIT_SSH_PRIV_KEY)
    - git config --global user.email "ivchyaroslav@gmail.com"
    - git config --global user.name "vinnibuh"
    - mkdir -p ~/.ssh
    - cat gitlab-known-hosts >> ~/.ssh/known_hosts
  script:
    - git checkout develop
    - make predict
    - git add .
    - git commit -m 'retrained model'
    - git push --force origin develop
  only:
    refs:
      - develop
      - merge_request

test_a:
  stage: test
  tags:
    - local
  script:
    - sphinx-build -b html ./docs/source ./public
  only:
    - branches
  except:
    - master

test_b:
  stage: test
  tags: 
    - local
  script:
    - docker pull $CONTAINER_TEST_IMAGE
    - docker run -v $(pwd)/.artifacts:/app/.artifacts $CONTAINER_TEST_IMAGE make test
  artifacts:
    when: always
    reports:
      junit: report.xml
      cobertura: coverage.xml

pages:
  stage: deploy
  tags:
    - local
  script:
    - sphinx-build -b html ./docs/source ./public
  artifacts:
    paths:
      - public
  only:
    - master

release-image:
  stage: release
  tags:
    - local
  script:
    - docker pull $CONTAINER_TEST_IMAGE
    - docker tag $CONTAINER_TEST_IMAGE $CONTAINER_RELEASE_IMAGE
    - docker push $CONTAINER_RELEASE_IMAGE
  only:
    - master
