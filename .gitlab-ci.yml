default:
  image: docker:19.03.12
  services:
    - docker:19.03.12-dind

stages:
  - retrain 
  - build
  - test
  - release
  - deploy

variables:
  DOCKER_TLS_CERTDIR: "/certs"
  CONTAINER_TEST_IMAGE: $CI_REGISTRY_IMAGE/housinglib-testing:$CI_COMMIT_REF_SLUG
  CONTAINER_RELEASE_IMAGE: $CI_REGISTRY_IMAGE/housinglib:latest

before_script:
  - apk update
  - apk add python3 
  - apk add py3-pip
  - docker info
  - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  - pip3 install -U sphinx
  - pip3 install -U sphinx_rtd_theme

build:
  stage: build
  tags: 
    - local
  script:
    - docker pull $CI_REGISTRY_IMAGE:latest || true
    - docker build --cache-from $CI_REGISTRY_IMAGE:latest --tag $CONTAINER_TEST_IMAGE .
    - docker push $CONTAINER_TEST_IMAGE

retrain_model:
  stage: retrain
  image: python:3.9.3-slim-buster
  tags:
    - local
  before_script:
  script:
    - apt-get update
    - apt-get -y install make
    - pip3 install -r requirements-test.txt
    - python3 setup.py install
    - dvc remote add -d mipt_drive gdrive://$GDRIVE_BUCKET
    - dvc remote modify mipt_drive gdrive_use_service_account true
    - dvc remote modify mipt_drive gdrive_service_account_json_file_path $GDRIVE_SERVICE_ACCOUNT_JSON
    - make predict
  only:
    - branches
  except:
    - master

test_a:
  stage: test
  tags:
    - local
  script:
    - sphinx-build -b html ./docs/source ./public
  only:
    - branches
  except:
    - master

test_b:
  stage: test
  tags: 
    - local
  script:
    - docker pull $CONTAINER_TEST_IMAGE
    - docker run -v $(pwd):/content $CONTAINER_TEST_IMAGE pytest --cov=housinglib --cov-branch --cov-report term-missing --cov-report xml:/content/coverage.xml test --junitxml=/content/report.xml
  artifacts:
    when: always
    reports:
      junit: report.xml
      cobertura: coverage.xml

pages:
  stage: deploy
  tags:
    - local
  script:
    - sphinx-build -b html ./docs/source ./public
  artifacts:
    paths:
      - public
  only:
    - master

release-image:
  stage: release
  tags:
    - local
  script:
    - docker pull $CONTAINER_TEST_IMAGE
    - docker tag $CONTAINER_TEST_IMAGE $CONTAINER_RELEASE_IMAGE
    - docker push $CONTAINER_RELEASE_IMAGE
  only:
    - master
